# -*- coding: utf-8 -*-
"""health_care_disease_predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1akqaKqQZgOrJJkCp5YGNVkwsP24MhP83
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# Example paths, adjust as per your actual file locations
dataset_file = '/content/drive/My Drive/Colab Notebooks/Predict/dataset.csv'
disease_description_file = '/content/drive/My Drive/Colab Notebooks/Predict/disease_description.csv'
disease_precaution_file = '/content/drive/My Drive/Colab Notebooks/Predict/disease_precaution.csv'
symptom_severity_file = '/content/drive/My Drive/Colab Notebooks/Predict/symptom_severity.csv'

# Load datasets
dataset = pd.read_csv(dataset_file)
disease_description = pd.read_csv(disease_description_file)
disease_precaution = pd.read_csv(disease_precaution_file)
symptom_severity = pd.read_csv(symptom_severity_file)
#Why: This step loads various datasets (dataset.csv, disease_description.csv, disease_precaution.csv, symptom_severity.csv) which are likely components of your project. These datasets contain information about diseases, their descriptions, precautions, and symptom severities.
#Result: Dataframes (dataset, disease_description, disease_precaution, symptom_severity) are loaded into memory for further analysis.

# Display basic info about each dataset
print("Dataset Information:")
print(dataset.info())

print("\nDisease Description Information:")
print(disease_description.info())

print("\nDisease Precaution Information:")
print(disease_precaution.info())

print("\nSymptom Severity Information:")
print(symptom_severity.info())

#Why: To understand the structure of each dataset, including column names, data types, and missing values.
#Result: Prints information such as number of columns, data types, and memory usage for each dataset.

# Check for missing values
print("Missing Values in Dataset:")
print(dataset.isnull().sum())

print("\nMissing Values in Disease Description:")
print(disease_description.isnull().sum())

print("\nMissing Values in Disease Precaution:")
print(disease_precaution.isnull().sum())

print("\nMissing Values in Symptom Severity:")
print(symptom_severity.isnull().sum())

#Why: Identifying missing values helps in determining if any data cleaning or imputation is needed.
#Result: Prints the count of missing values for each dataset.

# Example: Distribution of diseases
plt.figure(figsize=(10, 6))
sns.countplot(x='Disease', data=dataset)
plt.xticks(rotation=90)
plt.title('Distribution of Diseases')
plt.show()
#Why: Understanding the distribution of diseases helps in assessing class imbalances and informs modeling decisions.
#Result: Displays a count plot showing the frequency of each disease.
# Example: Correlation heatmap between symptoms and diseases
symptoms = dataset.drop(['Disease'], axis=1)
diseases = dataset['Disease']

# Clean symptoms data (convert to numeric)
symptoms_cleaned = symptoms.apply(lambda x: pd.to_numeric(x, errors='coerce'))

# Calculate correlation matrix
correlation_matrix = symptoms_cleaned.corrwith(diseases, axis=0)

# Plot correlation heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix.to_frame(), annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)
plt.title('Correlation between Symptoms and Diseases')
plt.xlabel('Symptoms')
plt.ylabel('Correlation with Disease')
plt.show()

#Why: To identify relationships (correlation) between symptoms and diseases, which can aid in feature selection or understanding disease patterns.
#Result: Displays a heatmap showing correlation coefficients between symptoms and diseases.

# Example data (replace with your actual data)
symptom_severity = pd.DataFrame({
    'Symptom': ['Abdominal Pain', 'Back Pain', 'Headache', 'Nausea', 'Fatigue', 'Joint Pain',
                'Fever', 'Cough', 'Diarrhea', 'Dizziness', 'Shortness of Breath', 'Sore Throat',
                'Chest Pain', 'Rash', 'Bloating', 'Constipation', 'Muscle Weakness', 'Insomnia',
                'Heart Palpitations', 'Blurred Vision', 'Loss of Appetite', 'Sweating', 'Vomiting',
                'Chills', 'Swollen Glands', 'Itching', 'Bruising', 'Dry Mouth', 'Cramps'],
    'Symptom_severity': [2, 1, 3, 2, 4, 3, 2, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 4, 2, 1, 3, 2, 1, 2, 3, 1, 2, 3, 4]
})

# Plotting
plt.figure(figsize=(18, 8))  # Adjust figure size as needed
sns.scatterplot(x='Symptom', y='Symptom_severity', data=symptom_severity)

# Customizing plot aesthetics
plt.title('Symptom Severity vs Symptom')
plt.xlabel('Symptom')
plt.ylabel('Symptom Severity')
plt.xticks(rotation=45, ha='right', fontsize=10)  # Rotate x-axis labels, align to the right, and adjust font size
plt.tight_layout()  # Adjust layout to prevent overlapping

# Adding spaces between labels
plt.subplots_adjust(bottom=0.25)  # Increase bottom margin to provide more space for x-axis labels

# Show plot
plt.show()

#Why: Visualizes the severity of symptoms, aiding in understanding which symptoms may have a higher impact on disease identification or severity.
#Result: Displays a scatter plot showing symptom severity for various symptoms.



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder


# Print findings from EDA
print("Findings from Exploratory Data Analysis (EDA):")
print("------------------------------------------------")

# Example: Print summary statistics
print("Summary Statistics:")
print(data.describe())
print()

# Example: Print unique diseases and their counts
print("Unique Diseases and Counts:")
print(data['Disease'].value_counts())
print()

# Example: Correlation heatmap between symptoms and diseases
# Ensure symptoms are numeric (if not already)
# Assuming symptoms are encoded as binary indicators (0 or 1)
symptoms_numeric = symptoms.apply(LabelEncoder().fit_transform)

plt.figure(figsize=(12, 8))
sns.heatmap(symptoms_numeric.corr(), annot=True, cmap='coolwarm', cbar=False, fmt='.2f')
plt.title('Correlation between Symptoms and Diseases')
plt.tight_layout()
plt.show()



"""Exploratory Data Analysis (EDA) findings, here are the key points:

### Correlation Matrix:
- The correlation matrix shows the relationships between different symptoms and diseases.
- Strong positive correlations (red squares) indicate a significant relationship between certain symptoms.
- Symptom 12 and Symptom 13 have a high correlation of 0.82.
- Symptom 12 and Symptom 14 have a high correlation of 0.89.
- Symptom 13 and Symptom 14 have the highest correlation of 0.89.

### Unique Diseases and Counts:
- There are 42 unique diseases in the dataset.
- The most frequent diseases, with 10 occurrences each, are:
  - Dengue
  - Hepatitis D
  - Chicken pox
  - Migraine
- Diseases with 9 occurrences include:
  - Diabetes
  - Hepatitis E
  - Hepatitis B
  - Hepatitis A
  - Jaundice
  - Hyperthyroidism
  - Hypoglycemia
  - Covid
  - Common Cold
  - Pneumonia
  - Tuberculosis
  - Typhoid
- Diseases with 8 occurrences:
  - Chronic cholestasis
  - Malaria
  - Hypothyroidism
  - Alcoholic hepatitis
  - Varicose veins
- Diseases with 7 occurrences:
  - Peptic ulcer disease
  - Paroxysmal Positional Vertigo
  - Osteoarthritis
  - Psoriasis
  - Hepatitis C
  - GERD

### Summary Statistics:
- There are 313 total cases recorded.
- Symptom 0, Symptom 1, and Symptom 2 are recorded for all 313 cases.
- The most common symptom across the dataset is vomiting, appearing most frequently in Symptom 0 and Symptom 1.
- Symptom 3 is recorded for 281 cases, with the most frequent being high fever.
- Symptom 4 is recorded for 234 cases, with headache being the most common.
- Symptom 5 (nausea) is recorded for 186 cases.
- Symptom 6 (abdominal pain) is recorded for 158 cases.
- Symptom 7 (loss of appetite) is recorded for 140 cases.
- Symptom 8 (malaise) is recorded for 120 cases.
- Symptom 9 (yellowing of eyes) is recorded for 110 cases.
- Symptom 10 (irritability) is recorded for 68 cases.
- Symptom 11 (malaise) is recorded for 47 cases.
- Symptom 12 (congestion) is recorded for 30 cases.
- Symptom 13 (chest pain) is recorded for 19 cases.
- Symptom 14 (loss of smell) is recorded for 18 cases.
- Symptom 15 (muscle pain) is recorded for 10 cases.
- Symptom 16 (muscle pain) is recorded for 1 case.

Overall, the EDA findings highlight the relationships between various symptoms and diseases, providing insights into the prevalence and co-occurrence of symptoms across different diseases.
"""

from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Assuming 'Disease' is the target variable and symptoms are features
X = dataset.drop(['Disease'], axis=1)
y = dataset['Disease']

# Encode categorical variables if necessary
# Example using OneHotEncoder for symptoms
encoder = OneHotEncoder(drop='first', sparse=False)
X_encoded = encoder.fit_transform(X)

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Initialize and train Logistic Regression
logreg = LogisticRegression(random_state=42)
logreg.fit(X_train, y_train)

# Predictions
y_pred = logreg.predict(X_test)

# Evaluation
print("Classification Report:")
print(classification_report(y_test, y_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")

#Why: Trains a logistic regression model to predict diseases based on symptoms.
#Result: Prints the classification report, confusion matrix, and accuracy score of the model.